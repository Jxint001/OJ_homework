注意移位时的数字是否需要是long long int！！！
用位运算存储数字信息
// #include <stdio.h>
// char *p1,*p2,buf[100000];
// #define nc() (p1==p2 && (p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)
// int read()
// {
//     int x=0,f=1;
//     char ch=nc();
//     while(ch<48||ch>57)
//     {
//         if(ch=='-')
//             f=-1;
//         ch=nc();
//     }
//     while(ch>=48&&ch<=57)
//         x=x*10+ch-48,ch=nc();
//     return x*f;
// }
// int main() {
//     int s1=0,s2=0,n;
//     n = read();
//     for(int i = 0; i < n; ++i) {
//         int num = read();
//         s1 = ~s2 & (s1 ^ num);
//         s2 = ~s1 & (s2 ^ num);
//     }
//     printf("%d",s1);
//     return 0;
// }
/*
三位计算器：
h1  h2
0   0   c0
0   1   c1
1   0   c2
只有只出现一次的数的是1位会停留在c1，其余均从c0出发又回到c0
*/

位运算——左程云b站
题目1 交换两个数
题目2 不用任何判断语句和比较操作，返回两个数的最大值
题目3 找到缺失的数字
题目4 数组中1种数出现了奇数次，其他的数都出现了偶数次，返回出现了奇数次的数
Brian Kernighan算法-提取出二进制状态中最右侧的1题目5 数组中有2种数出现了奇数次，其他的数都出现了偶数次，返回这2种出现了奇数次的数
题目6 数组中只有1种数出现次数少于m次，其他数都出现了m次，返回出现次数小于m次的那种数

获得最右侧的1(的状态) ...000010000
int x = v & (-v) ;

取第n位的值（从右边）
int r = (v >> n) & 1;

把某一位置1（从右边）
v = v | (1 << n)

把某一位取反（从右边）
v = v ^ (1 << n);

把最后一个1置0
v = v & (v - 1);    

奇偶判断
(v & 1)

计算绝对值？
int a = v >> 31;
int r = (v ^ a) - a;
或者 int r = (v + a) ^ a;

取模？
v % (2^n)可以转化为去掉n位之前的值
int mod = v & (2^n - 1); 

下一个2的幂次方
unsigned int nextpowerof2(register unsigned int x)
{
　　x |= (x >> 1);
　　x |= (x >> 2);
　　x |= (x >> 4);
　　x |= (x >> 8);
　　x |= (x >> 16);
　　return(x+1);
}

保留最高位的1 （上一个2的幂次方）
unsigned int lastpowerof2(register unsigned int x)
{
　　x |= (x >> 1);
　　x |= (x >> 2);
　　x |= (x >> 4);
　　x |= (x >> 8);
　　x |= (x >> 16);
　　return(x & ~(x >> 1));
}